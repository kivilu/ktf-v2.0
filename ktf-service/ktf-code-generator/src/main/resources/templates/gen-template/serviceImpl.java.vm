package ${package.ServiceImpl};

import java.util.List;
import java.util.Map;

import ${package.Entity}.${entity};
import com.${package.ModuleName}.dto.${entity}DTO;
import ${package.Mapper}.${table.mapperName};
import ${package.Service}.${table.serviceName};
import ${superServiceImplClassPackage};

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;

import com.kivi.db.page.PageParams;
import com.kivi.framework.annotation.KtfTrace;
import com.kivi.framework.constant.KtfConstant;
import com.kivi.framework.converter.BeanConverter;
import com.kivi.framework.util.kit.NumberKit;
import com.kivi.framework.util.kit.ObjectKit;
import com.kivi.framework.vo.page.PageInfoVO;
import com.vip.vjtools.vjkit.collection.MapUtil;


/**
 * <p>
 * $!{table.comment} 服务实现类
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@Service
@Transactional(rollbackFor = Exception.class)
#if(${kotlin})
open class ${table.serviceImplName} : ${superServiceImplClass}<${table.mapperName}, ${entity}>(), ${table.serviceName} {

}
#else
public class ${table.serviceImplName} extends ${superServiceImplClass}<${table.mapperName}, ${entity}> implements ${table.serviceName} {

	/**
     * 根据ID查询$!{table.comment}
     */
    @KtfTrace("根据ID查询$!{table.comment}")
    @Override
 	public ${entityDTO} getDTOById(Long id){
 		${entity} entity = super.getById(id);
 		if (entity == null)
			return null;
    	${entityDTO} dto = BeanConverter.convert(${entityDTO}.class, entity, BeanConverter.long2String,BeanConverter.integer2String);
 		return dto;
 	}
 	
 	/**
 	 * 新增$!{table.comment}
 	 */
 	@KtfTrace("新增$!{table.comment}")
 	@Override
 	public Boolean save(${entityDTO} ${lowrEntityDTO}){
 		${entity} entity = BeanConverter.convert(${entity}.class,${lowrEntityDTO});
 		
 		return super.save(entity);
 	}
 	
 	/**
 	 * 修改
 	 */
 	@KtfTrace("修改$!{table.comment}")
 	@Override
 	public Boolean updateById(${entityDTO} ${lowrEntityDTO}){
 		${entity} entity = BeanConverter.convert(${entity}.class, ${lowrEntityDTO});
        return super.updateById(entity);
 	}
 	
 	/**
 	 * 查询列表
 	 */
 	@KtfTrace("查询列表$!{table.comment}")
 	@Override
 	public List<${entityDTO}> list(${entityDTO} ${lowrEntityDTO}){
 		Map<String, Object> params = BeanConverter.beanToMap(${lowrEntityDTO});
		return this.list(params, new String[0]);
	}
	
	/**
	 * 指定列模糊查询
	 */
	@Override
 	public List<${entityDTO}> listLike(Map<String, Object> params, String... columns){
 		if(params!=null)
			params.remove(KtfConstant.URL_TIMESTAMP);
 		QueryWrapper<${entity}> query = Wrappers.<${entity}>query().select(columns);
		if (MapUtil.isNotEmpty(params)) {
			params.entrySet().stream().forEach(entry -> {
				if (ObjectKit.isNotEmpty(entry.getValue())) {
					if (NumberKit.isNumberic(entry.getValue()))
						query.eq(entry.getKey(), entry.getValue());
					else
						query.like(entry.getKey(), entry.getValue());
				}
			});
		}

		List<${entity}> list = super.list(query);
		return BeanConverter.convert(${entityDTO}.class, list);
 	}
 	
 	/**
 	 * 分页查询
 	 */
 	 @KtfTrace("分页查询$!{table.comment}")
 	public PageInfoVO<${entityDTO}> page(Map<String, Object> params){
 		PageParams<${entityDTO}> pageParams = new PageParams<>(params);
    	Page<${entity}> page = new Page<>(pageParams.getCurrPage(), pageParams.getPageSize());
    	
    	QueryWrapper<${entity}> query = Wrappers.<${entity}>query();
    	if (MapUtil.isNotEmpty(pageParams.getRequestMap())) {
			pageParams.getRequestMap().entrySet().stream().forEach(entry -> {
				if (ObjectKit.isNotEmpty(entry.getValue())) {
					if (NumberKit.isNumberic(entry.getValue()))
						query.eq(entry.getKey(), entry.getValue());
					else
						query.like(entry.getKey(), entry.getValue());
				}
			});
		}
    	
    	IPage<${entity}> iPage = super.page(page, query);
    	
    	PageInfoVO<${entityDTO}>	pageVo	= new PageInfoVO<>();
		pageVo.setCurPage(iPage.getCurrent());
		pageVo.setTotal(iPage.getTotal());
		pageVo.setPageSize(iPage.getSize());
		pageVo.setPages(iPage.getPages());
		pageVo.setRequestMap(params);
		pageVo.setList( BeanConverter.convert(${entityDTO}.class,iPage.getRecords()));
		pageVo.compute();
    	
    	return pageVo;
 	
 	}

}
#end
