<?xml version="1.0" encoding="UTF-8"?>
<!--
-scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true
-scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。
-           当scan为true时，此属性生效。默认的时间间隔为1分钟
-debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-
- configuration 子节点为 appender、logger、root

说明：
    1. 文件的命名和加载顺序有关
       logback.xml早于application.yml加载，logback-spring.xml晚于application.yml加载
       如果logback配置需要使用application.yml中的属性，需要命名为logback-spring.xml
    2. logback使用application.yml中的属性
       使用springProperty才可使用application.yml中的值 可以设置默认值


-->
<configuration scan="true" scanPeriod="5 second" debug="true">
	<!-- 日志名称 -->
	<property name="APP_NAME" value="mp-sample"/>
	<!--日志文件的存储地址，勿在 LogBack 的配置中使用相对路径-->
	<property name="LOG_PATH" value="/tmp/logs"/>
	
	<springProperty scope="context" name="DB_DRIVER" source="ktf.logback.datasource.driver-class-name"/>
	<springProperty scope="context" name="DB_URL" source="ktf.logback.datasource.url"/>
	<springProperty scope="context" name="DB_USER" source="ktf.logback.datasource.username"/>
	<springProperty scope="context" name="DB_PASS" source="ktf.logback.datasource.password"/>
	<springProperty scope="context" name="DB_DATASOURCE" source="ktf.logback.datasource.type"/>
	<springProperty scope="context" name="DB_INITIAL_SIZE" source="ktf.logback.datasource.initial-size"/>
	<springProperty scope="context" name="DB_MAX_TOTAL" source="ktf.logback.datasource.max-total"/>
	<springProperty scope="context" name="DB_MAX_IDLE" source="ktf.logback.datasource.max-idle"/>
	<springProperty scope="context" name="DB_MIN_IDLE" source="ktf.logback.datasource.min-idle"/>
	
    <!-- 负责写日志,控制台日志 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 一是把日志信息转换成字节数组,二是把字节数组写入到输出流 -->
        <encoder>
            <Pattern>[${APP_NAME}] %d |-%-5level [%thread] %logger -%msg%n</Pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

	<!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
	<appender name="ALL_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>${LOG_PATH}/${APP_NAME}.log</File>
 
        <encoder>
            <Pattern>[${APP_NAME}] %d |-%-5level [%thread] %logger -%msg%n</Pattern>
            <charset>UTF-8</charset>
        </encoder>
 
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 每天生成一个日志文件，保存10天的日志文件
            - 如果隔一段时间没有输出日志，前面过期的日志不会被删除，只有再重新打印日志的时候，会触发删除过期日志的操作。
            -->
            <fileNamePattern>${LOG_PATH}/${APP_NAME}.%d{yyyy-MM-dd}.%i.log.zip</fileNamePattern>
            <maxHistory>10</maxHistory>
            <TimeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>500MB</maxFileSize>
            </TimeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
    </appender >

    <!-- 将日志写入数据库 -->
    <!-- <appender name="DB-CLASSIC-MYSQL-POOL" class="ch.qos.logback.classic.db.DBAppender">  --> 
    <!-- <appender name="DB-CLASSIC-MYSQL-POOL" class="com.kivi.framework.logback.KtfLogDBAppender">
         <filter class="com.kivi.framework.logback.KtfLogFilter"/>
         <connectionSource class="ch.qos.logback.core.db.DataSourceConnectionSource">
			<dataSource class="${DB_DATASOURCE}">
				<driverClassName>${DB_DRIVER}</driverClassName>
				<url>${DB_URL}</url>
				<username>${DB_USER}</username>
				<password>${DB_PASS}</password>
				<initialSize>${DB_INITIAL_SIZE}</initialSize>
				<maxTotal>${DB_MAX_TOTAL}</maxTotal>
				<maxIdle>${DB_MAX_IDLE}</maxIdle>
				<minIdle>${DB_MIN_IDLE}</minIdle>
				<maxWaitMillis>60</maxWaitMillis>
				指明连接是否被空闲连接回收器(如果有)进行检验
				<testWhileIdle>true</testWhileIdle>
			    运行一次空闲连接回收器的时间间隔（60秒）
			    <timeBetweenEvictionRunsMillis>60</timeBetweenEvictionRunsMillis>
			    验证时使用的SQL语句
			    <validationQuery>SELECT 1</validationQuery>
			    借出连接时不要测试，否则很影响性能
			    <testOnBorrow>false</testOnBorrow>
			</dataSource>
			<dataSource class="org.apache.commons.dbcp.BasicDataSource">  
                <driverClassName>com.mysql.cj.jdbc.Driver</driverClassName>  
                <url>jdbc:mysql://192.168.0.66:3306/logback?characterEncoding=UTF-8</url>  
                <username>root</username>  
                <password>root</password>  
            </dataSource>
		</connectionSource>
    </appender>  -->
 
    <!-- 异步输出 -->
    <appender name ="ASYNC" class= "ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold >0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>256</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref ="ALL_LOG"/>
    </appender>

 	<!-- <appender name ="DB_ASYNC" class= "ch.qos.logback.classic.AsyncAppender">
        不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志
        <discardingThreshold >0</discardingThreshold>
        更改默认的队列的深度,该值会影响性能.默认值为256
        <queueSize>256</queueSize>
        添加附加的appender,最多只能添加一个
        <appender-ref ref ="DB-CLASSIC-MYSQL-POOL"/>
    </appender> -->

	
	
 
    <!--
    - 1.name：包名或类名，用来指定受此logger约束的某一个包或者具体的某一个类
    - 2.未设置打印级别，所以继承他的上级<root>的日志级别“DEBUG”
    - 3.未设置addtivity，默认为true，将此logger的打印信息向上级传递；
    - 4.未设置appender，此logger本身不打印任何信息，级别为“DEBUG”及大于“DEBUG”的日志信息传递给root，
    -  root接到下级传递的信息，交给已经配置好的名为“STDOUT”的appender处理，“STDOUT”appender将信息打印到控制台；
    -->
    <logger name="ch.qos.logback" />
	<logger name="org.apache" level="INFO" />
	<logger name="org.apache.http.wire" level="INFO" />
	<logger name="org.springframework" level="INFO" />
	<logger name="org.springframework.jdbc" level="INFO" />
	<logger name="org.mybatis" level="DEBUG" />
	<logger name="org.springframework.transaction" level="DEBUG" />
	<logger name="org.redisson" level="INFO" />
	<logger name="org.redisson.command" level="INFO" />
	<logger name="org.apache.shiro" level="TRACE" />
	<logger name="java.Connection" level="INFO" />
	<logger name="java.sql" level="INFO" />
	<logger name="java.Statement" level="INFO" />
	<logger name="druid.Connection" level="INFO" />
	<logger name="druid.Statement" level="INFO" />
	<logger name="druid.sql" level="INFO" />
	<logger name="com.alibaba.dubbo" level="INFO" />
	<logger name="de.codecentric" level="INFO"/>
	<logger name="sun.net.www.protocol" level="INFO"/>
	<logger name="javax.management" level="INFO" />
	<logger name="sun.rmi" level="INFO" />
	<logger name="org.xnio.nio" level="INFO" />
	<logger name="io.undertow.request" level="INFO" />
	<logger name="io.lettuce" level="INFO" />
	
    <!--
    - 1.将级别为“INFO”及大于“INFO”的日志信息交给此logger指定的名为“STDOUT”的appender处理，在控制台中打出日志，
    -   不再向次logger的上级 <logger name="logback"/> 传递打印信息
    - 2.level：设置打印级别（TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF），还有一个特殊值INHERITED或者同义词NULL，代表强制执行上级的级别。
    -        如果未设置此属性，那么当前logger将会继承上级的级别。
    - 3.additivity：为false，表示此logger的打印信息不再向上级传递,如果设置为true，会打印两次
    - 4.appender-ref：指定了名字为"STDOUT"的appender。
    -->
   <logger name="org.springframework" level="INFO" additivity="false">
        <appender-ref ref="STDOUT"/>
    </logger>
    <!--
    - 根logger
    - level:设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。
    -       默认是DEBUG。
    -appender-ref:可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger
    -->
    <root level="TRACE">
	    <appender-ref ref="STDOUT"/>
	    <appender-ref ref="ASYNC"/>
		<!-- <appender-ref ref="DB_ASYNC"/> -->
	</root>
</configuration>

